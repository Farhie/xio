/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * <p>DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.xjeffrose.xio.config.thrift;

import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-08-23")
public class IpRule
    implements org.apache.thrift.TBase<IpRule, IpRule._Fields>,
        java.io.Serializable,
        Cloneable,
        Comparable<IpRule> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
      new org.apache.thrift.protocol.TStruct("IpRule");

  private static final org.apache.thrift.protocol.TField IP_ADDRESS_FIELD_DESC =
      new org.apache.thrift.protocol.TField(
          "ipAddress", org.apache.thrift.protocol.TType.STRING, (short) 1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes =
      new HashMap<Class<? extends IScheme>, SchemeFactory>();

  static {
    schemes.put(StandardScheme.class, new IpRuleStandardSchemeFactory());
    schemes.put(TupleScheme.class, new IpRuleTupleSchemeFactory());
  }

  public ByteBuffer ipAddress; // required

  /**
   * The set of fields this struct contains, along with convenience methods for finding and
   * manipulating them.
   */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IP_ADDRESS((short) 1, "ipAddress");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /** Find the _Fields constant that matches fieldId, or null if its not found. */
    public static _Fields findByThriftId(int fieldId) {
      switch (fieldId) {
        case 1: // IP_ADDRESS
          return IP_ADDRESS;
        default:
          return null;
      }
    }

    /** Find the _Fields constant that matches fieldId, throwing an exception if it is not found. */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null)
        throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /** Find the _Fields constant that matches name, or null if its not found. */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
        new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(
        _Fields.IP_ADDRESS,
        new org.apache.thrift.meta_data.FieldMetaData(
            "ipAddress",
            org.apache.thrift.TFieldRequirementType.DEFAULT,
            new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING, true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IpRule.class, metaDataMap);
  }

  public IpRule() {}

  public IpRule(ByteBuffer ipAddress) {
    this();
    this.ipAddress = org.apache.thrift.TBaseHelper.copyBinary(ipAddress);
  }

  /** Performs a deep copy on <i>other</i>. */
  public IpRule(IpRule other) {
    if (other.isSetIpAddress()) {
      this.ipAddress = org.apache.thrift.TBaseHelper.copyBinary(other.ipAddress);
    }
  }

  public IpRule deepCopy() {
    return new IpRule(this);
  }

  @Override
  public void clear() {
    this.ipAddress = null;
  }

  public byte[] getIpAddress() {
    setIpAddress(org.apache.thrift.TBaseHelper.rightSize(ipAddress));
    return ipAddress == null ? null : ipAddress.array();
  }

  public ByteBuffer bufferForIpAddress() {
    return org.apache.thrift.TBaseHelper.copyBinary(ipAddress);
  }

  public IpRule setIpAddress(byte[] ipAddress) {
    this.ipAddress =
        ipAddress == null
            ? (ByteBuffer) null
            : ByteBuffer.wrap(Arrays.copyOf(ipAddress, ipAddress.length));
    return this;
  }

  public IpRule setIpAddress(ByteBuffer ipAddress) {
    this.ipAddress = org.apache.thrift.TBaseHelper.copyBinary(ipAddress);
    return this;
  }

  public void unsetIpAddress() {
    this.ipAddress = null;
  }

  /** Returns true if field ipAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetIpAddress() {
    return this.ipAddress != null;
  }

  public void setIpAddressIsSet(boolean value) {
    if (!value) {
      this.ipAddress = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
      case IP_ADDRESS:
        if (value == null) {
          unsetIpAddress();
        } else {
          setIpAddress((ByteBuffer) value);
        }
        break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
      case IP_ADDRESS:
        return getIpAddress();
    }
    throw new IllegalStateException();
  }

  /**
   * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
      case IP_ADDRESS:
        return isSetIpAddress();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null) return false;
    if (that instanceof IpRule) return this.equals((IpRule) that);
    return false;
  }

  public boolean equals(IpRule that) {
    if (that == null) return false;

    boolean this_present_ipAddress = true && this.isSetIpAddress();
    boolean that_present_ipAddress = true && that.isSetIpAddress();
    if (this_present_ipAddress || that_present_ipAddress) {
      if (!(this_present_ipAddress && that_present_ipAddress)) return false;
      if (!this.ipAddress.equals(that.ipAddress)) return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_ipAddress = true && (isSetIpAddress());
    list.add(present_ipAddress);
    if (present_ipAddress) list.add(ipAddress);

    return list.hashCode();
  }

  @Override
  public int compareTo(IpRule other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIpAddress()).compareTo(other.isSetIpAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIpAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipAddress, other.ipAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot)
      throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("IpRule(");
    boolean first = true;

    sb.append("ipAddress:");
    if (this.ipAddress == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.ipAddress, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in)
      throws java.io.IOException, ClassNotFoundException {
    try {
      read(
          new org.apache.thrift.protocol.TCompactProtocol(
              new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IpRuleStandardSchemeFactory implements SchemeFactory {
    public IpRuleStandardScheme getScheme() {
      return new IpRuleStandardScheme();
    }
  }

  private static class IpRuleStandardScheme extends StandardScheme<IpRule> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, IpRule struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true) {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // IP_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ipAddress = iprot.readBinary();
              struct.setIpAddressIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, IpRule struct)
        throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ipAddress != null) {
        oprot.writeFieldBegin(IP_ADDRESS_FIELD_DESC);
        oprot.writeBinary(struct.ipAddress);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
  }

  private static class IpRuleTupleSchemeFactory implements SchemeFactory {
    public IpRuleTupleScheme getScheme() {
      return new IpRuleTupleScheme();
    }
  }

  private static class IpRuleTupleScheme extends TupleScheme<IpRule> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, IpRule struct)
        throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIpAddress()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetIpAddress()) {
        oprot.writeBinary(struct.ipAddress);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, IpRule struct)
        throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.ipAddress = iprot.readBinary();
        struct.setIpAddressIsSet(true);
      }
    }
  }
}
