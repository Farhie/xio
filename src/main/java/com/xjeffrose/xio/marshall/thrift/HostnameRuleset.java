/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xjeffrose.xio.marshall.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-07-20")
public class HostnameRuleset implements org.apache.thrift.TBase<HostnameRuleset, HostnameRuleset._Fields>, java.io.Serializable, Cloneable, Comparable<HostnameRuleset> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostnameRuleset");

  private static final org.apache.thrift.protocol.TField BLACKLIST_HOSTS_FIELD_DESC = new org.apache.thrift.protocol.TField("blacklistHosts", org.apache.thrift.protocol.TType.SET, (short)1);
  private static final org.apache.thrift.protocol.TField WHITELIST_HOSTS_FIELD_DESC = new org.apache.thrift.protocol.TField("whitelistHosts", org.apache.thrift.protocol.TType.SET, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostnameRulesetStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostnameRulesetTupleSchemeFactory());
  }

  public Set<String> blacklistHosts; // required
  public Set<String> whitelistHosts; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BLACKLIST_HOSTS((short)1, "blacklistHosts"),
    WHITELIST_HOSTS((short)2, "whitelistHosts");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BLACKLIST_HOSTS
          return BLACKLIST_HOSTS;
        case 2: // WHITELIST_HOSTS
          return WHITELIST_HOSTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BLACKLIST_HOSTS, new org.apache.thrift.meta_data.FieldMetaData("blacklistHosts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.WHITELIST_HOSTS, new org.apache.thrift.meta_data.FieldMetaData("whitelistHosts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostnameRuleset.class, metaDataMap);
  }

  public HostnameRuleset() {
  }

  public HostnameRuleset(
    Set<String> blacklistHosts,
    Set<String> whitelistHosts)
  {
    this();
    this.blacklistHosts = blacklistHosts;
    this.whitelistHosts = whitelistHosts;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostnameRuleset(HostnameRuleset other) {
    if (other.isSetBlacklistHosts()) {
      Set<String> __this__blacklistHosts = new HashSet<String>(other.blacklistHosts);
      this.blacklistHosts = __this__blacklistHosts;
    }
    if (other.isSetWhitelistHosts()) {
      Set<String> __this__whitelistHosts = new HashSet<String>(other.whitelistHosts);
      this.whitelistHosts = __this__whitelistHosts;
    }
  }

  public HostnameRuleset deepCopy() {
    return new HostnameRuleset(this);
  }

  @Override
  public void clear() {
    this.blacklistHosts = null;
    this.whitelistHosts = null;
  }

  public int getBlacklistHostsSize() {
    return (this.blacklistHosts == null) ? 0 : this.blacklistHosts.size();
  }

  public java.util.Iterator<String> getBlacklistHostsIterator() {
    return (this.blacklistHosts == null) ? null : this.blacklistHosts.iterator();
  }

  public void addToBlacklistHosts(String elem) {
    if (this.blacklistHosts == null) {
      this.blacklistHosts = new HashSet<String>();
    }
    this.blacklistHosts.add(elem);
  }

  public Set<String> getBlacklistHosts() {
    return this.blacklistHosts;
  }

  public HostnameRuleset setBlacklistHosts(Set<String> blacklistHosts) {
    this.blacklistHosts = blacklistHosts;
    return this;
  }

  public void unsetBlacklistHosts() {
    this.blacklistHosts = null;
  }

  /** Returns true if field blacklistHosts is set (has been assigned a value) and false otherwise */
  public boolean isSetBlacklistHosts() {
    return this.blacklistHosts != null;
  }

  public void setBlacklistHostsIsSet(boolean value) {
    if (!value) {
      this.blacklistHosts = null;
    }
  }

  public int getWhitelistHostsSize() {
    return (this.whitelistHosts == null) ? 0 : this.whitelistHosts.size();
  }

  public java.util.Iterator<String> getWhitelistHostsIterator() {
    return (this.whitelistHosts == null) ? null : this.whitelistHosts.iterator();
  }

  public void addToWhitelistHosts(String elem) {
    if (this.whitelistHosts == null) {
      this.whitelistHosts = new HashSet<String>();
    }
    this.whitelistHosts.add(elem);
  }

  public Set<String> getWhitelistHosts() {
    return this.whitelistHosts;
  }

  public HostnameRuleset setWhitelistHosts(Set<String> whitelistHosts) {
    this.whitelistHosts = whitelistHosts;
    return this;
  }

  public void unsetWhitelistHosts() {
    this.whitelistHosts = null;
  }

  /** Returns true if field whitelistHosts is set (has been assigned a value) and false otherwise */
  public boolean isSetWhitelistHosts() {
    return this.whitelistHosts != null;
  }

  public void setWhitelistHostsIsSet(boolean value) {
    if (!value) {
      this.whitelistHosts = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BLACKLIST_HOSTS:
      if (value == null) {
        unsetBlacklistHosts();
      } else {
        setBlacklistHosts((Set<String>)value);
      }
      break;

    case WHITELIST_HOSTS:
      if (value == null) {
        unsetWhitelistHosts();
      } else {
        setWhitelistHosts((Set<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BLACKLIST_HOSTS:
      return getBlacklistHosts();

    case WHITELIST_HOSTS:
      return getWhitelistHosts();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BLACKLIST_HOSTS:
      return isSetBlacklistHosts();
    case WHITELIST_HOSTS:
      return isSetWhitelistHosts();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostnameRuleset)
      return this.equals((HostnameRuleset)that);
    return false;
  }

  public boolean equals(HostnameRuleset that) {
    if (that == null)
      return false;

    boolean this_present_blacklistHosts = true && this.isSetBlacklistHosts();
    boolean that_present_blacklistHosts = true && that.isSetBlacklistHosts();
    if (this_present_blacklistHosts || that_present_blacklistHosts) {
      if (!(this_present_blacklistHosts && that_present_blacklistHosts))
        return false;
      if (!this.blacklistHosts.equals(that.blacklistHosts))
        return false;
    }

    boolean this_present_whitelistHosts = true && this.isSetWhitelistHosts();
    boolean that_present_whitelistHosts = true && that.isSetWhitelistHosts();
    if (this_present_whitelistHosts || that_present_whitelistHosts) {
      if (!(this_present_whitelistHosts && that_present_whitelistHosts))
        return false;
      if (!this.whitelistHosts.equals(that.whitelistHosts))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_blacklistHosts = true && (isSetBlacklistHosts());
    list.add(present_blacklistHosts);
    if (present_blacklistHosts)
      list.add(blacklistHosts);

    boolean present_whitelistHosts = true && (isSetWhitelistHosts());
    list.add(present_whitelistHosts);
    if (present_whitelistHosts)
      list.add(whitelistHosts);

    return list.hashCode();
  }

  @Override
  public int compareTo(HostnameRuleset other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBlacklistHosts()).compareTo(other.isSetBlacklistHosts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlacklistHosts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blacklistHosts, other.blacklistHosts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWhitelistHosts()).compareTo(other.isSetWhitelistHosts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWhitelistHosts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.whitelistHosts, other.whitelistHosts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostnameRuleset(");
    boolean first = true;

    sb.append("blacklistHosts:");
    if (this.blacklistHosts == null) {
      sb.append("null");
    } else {
      sb.append(this.blacklistHosts);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("whitelistHosts:");
    if (this.whitelistHosts == null) {
      sb.append("null");
    } else {
      sb.append(this.whitelistHosts);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostnameRulesetStandardSchemeFactory implements SchemeFactory {
    public HostnameRulesetStandardScheme getScheme() {
      return new HostnameRulesetStandardScheme();
    }
  }

  private static class HostnameRulesetStandardScheme extends StandardScheme<HostnameRuleset> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostnameRuleset struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BLACKLIST_HOSTS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.blacklistHosts = new HashSet<String>(2*_set0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _set0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.blacklistHosts.add(_elem1);
                }
                iprot.readSetEnd();
              }
              struct.setBlacklistHostsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WHITELIST_HOSTS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set3 = iprot.readSetBegin();
                struct.whitelistHosts = new HashSet<String>(2*_set3.size);
                String _elem4;
                for (int _i5 = 0; _i5 < _set3.size; ++_i5)
                {
                  _elem4 = iprot.readString();
                  struct.whitelistHosts.add(_elem4);
                }
                iprot.readSetEnd();
              }
              struct.setWhitelistHostsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostnameRuleset struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.blacklistHosts != null) {
        oprot.writeFieldBegin(BLACKLIST_HOSTS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.blacklistHosts.size()));
          for (String _iter6 : struct.blacklistHosts)
          {
            oprot.writeString(_iter6);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.whitelistHosts != null) {
        oprot.writeFieldBegin(WHITELIST_HOSTS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.whitelistHosts.size()));
          for (String _iter7 : struct.whitelistHosts)
          {
            oprot.writeString(_iter7);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostnameRulesetTupleSchemeFactory implements SchemeFactory {
    public HostnameRulesetTupleScheme getScheme() {
      return new HostnameRulesetTupleScheme();
    }
  }

  private static class HostnameRulesetTupleScheme extends TupleScheme<HostnameRuleset> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostnameRuleset struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBlacklistHosts()) {
        optionals.set(0);
      }
      if (struct.isSetWhitelistHosts()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetBlacklistHosts()) {
        {
          oprot.writeI32(struct.blacklistHosts.size());
          for (String _iter8 : struct.blacklistHosts)
          {
            oprot.writeString(_iter8);
          }
        }
      }
      if (struct.isSetWhitelistHosts()) {
        {
          oprot.writeI32(struct.whitelistHosts.size());
          for (String _iter9 : struct.whitelistHosts)
          {
            oprot.writeString(_iter9);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostnameRuleset struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TSet _set10 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.blacklistHosts = new HashSet<String>(2*_set10.size);
          String _elem11;
          for (int _i12 = 0; _i12 < _set10.size; ++_i12)
          {
            _elem11 = iprot.readString();
            struct.blacklistHosts.add(_elem11);
          }
        }
        struct.setBlacklistHostsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TSet _set13 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.whitelistHosts = new HashSet<String>(2*_set13.size);
          String _elem14;
          for (int _i15 = 0; _i15 < _set13.size; ++_i15)
          {
            _elem14 = iprot.readString();
            struct.whitelistHosts.add(_elem14);
          }
        }
        struct.setWhitelistHostsIsSet(true);
      }
    }
  }

}

