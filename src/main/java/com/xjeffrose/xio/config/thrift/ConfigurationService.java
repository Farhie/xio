/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xjeffrose.xio.config.thrift;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-08-23")
public class ConfigurationService {

  public interface Iface {

    public Result addIpRule(IpRule ipRule, RuleType ruleType) throws org.apache.thrift.TException;

    public Result removeIpRule(IpRule ipRule) throws org.apache.thrift.TException;

    public Result addHttp1Rule(com.xjeffrose.xio.marshall.thrift.Http1Rule http1Rule, RuleType ruleType) throws org.apache.thrift.TException;

    public Result removeHttp1Rule(com.xjeffrose.xio.marshall.thrift.Http1Rule http1Rule) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addIpRule(IpRule ipRule, RuleType ruleType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeIpRule(IpRule ipRule, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addHttp1Rule(com.xjeffrose.xio.marshall.thrift.Http1Rule http1Rule, RuleType ruleType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeHttp1Rule(com.xjeffrose.xio.marshall.thrift.Http1Rule http1Rule, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Result addIpRule(IpRule ipRule, RuleType ruleType) throws org.apache.thrift.TException
    {
      send_addIpRule(ipRule, ruleType);
      return recv_addIpRule();
    }

    public void send_addIpRule(IpRule ipRule, RuleType ruleType) throws org.apache.thrift.TException
    {
      addIpRule_args args = new addIpRule_args();
      args.setIpRule(ipRule);
      args.setRuleType(ruleType);
      sendBase("addIpRule", args);
    }

    public Result recv_addIpRule() throws org.apache.thrift.TException
    {
      addIpRule_result result = new addIpRule_result();
      receiveBase(result, "addIpRule");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addIpRule failed: unknown result");
    }

    public Result removeIpRule(IpRule ipRule) throws org.apache.thrift.TException
    {
      send_removeIpRule(ipRule);
      return recv_removeIpRule();
    }

    public void send_removeIpRule(IpRule ipRule) throws org.apache.thrift.TException
    {
      removeIpRule_args args = new removeIpRule_args();
      args.setIpRule(ipRule);
      sendBase("removeIpRule", args);
    }

    public Result recv_removeIpRule() throws org.apache.thrift.TException
    {
      removeIpRule_result result = new removeIpRule_result();
      receiveBase(result, "removeIpRule");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeIpRule failed: unknown result");
    }

    public Result addHttp1Rule(com.xjeffrose.xio.marshall.thrift.Http1Rule http1Rule, RuleType ruleType) throws org.apache.thrift.TException
    {
      send_addHttp1Rule(http1Rule, ruleType);
      return recv_addHttp1Rule();
    }

    public void send_addHttp1Rule(com.xjeffrose.xio.marshall.thrift.Http1Rule http1Rule, RuleType ruleType) throws org.apache.thrift.TException
    {
      addHttp1Rule_args args = new addHttp1Rule_args();
      args.setHttp1Rule(http1Rule);
      args.setRuleType(ruleType);
      sendBase("addHttp1Rule", args);
    }

    public Result recv_addHttp1Rule() throws org.apache.thrift.TException
    {
      addHttp1Rule_result result = new addHttp1Rule_result();
      receiveBase(result, "addHttp1Rule");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addHttp1Rule failed: unknown result");
    }

    public Result removeHttp1Rule(com.xjeffrose.xio.marshall.thrift.Http1Rule http1Rule) throws org.apache.thrift.TException
    {
      send_removeHttp1Rule(http1Rule);
      return recv_removeHttp1Rule();
    }

    public void send_removeHttp1Rule(com.xjeffrose.xio.marshall.thrift.Http1Rule http1Rule) throws org.apache.thrift.TException
    {
      removeHttp1Rule_args args = new removeHttp1Rule_args();
      args.setHttp1Rule(http1Rule);
      sendBase("removeHttp1Rule", args);
    }

    public Result recv_removeHttp1Rule() throws org.apache.thrift.TException
    {
      removeHttp1Rule_result result = new removeHttp1Rule_result();
      receiveBase(result, "removeHttp1Rule");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeHttp1Rule failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addIpRule(IpRule ipRule, RuleType ruleType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addIpRule_call method_call = new addIpRule_call(ipRule, ruleType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addIpRule_call extends org.apache.thrift.async.TAsyncMethodCall {
      private IpRule ipRule;
      private RuleType ruleType;
      public addIpRule_call(IpRule ipRule, RuleType ruleType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ipRule = ipRule;
        this.ruleType = ruleType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addIpRule", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addIpRule_args args = new addIpRule_args();
        args.setIpRule(ipRule);
        args.setRuleType(ruleType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addIpRule();
      }
    }

    public void removeIpRule(IpRule ipRule, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeIpRule_call method_call = new removeIpRule_call(ipRule, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeIpRule_call extends org.apache.thrift.async.TAsyncMethodCall {
      private IpRule ipRule;
      public removeIpRule_call(IpRule ipRule, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ipRule = ipRule;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeIpRule", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeIpRule_args args = new removeIpRule_args();
        args.setIpRule(ipRule);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeIpRule();
      }
    }

    public void addHttp1Rule(com.xjeffrose.xio.marshall.thrift.Http1Rule http1Rule, RuleType ruleType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addHttp1Rule_call method_call = new addHttp1Rule_call(http1Rule, ruleType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addHttp1Rule_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.xjeffrose.xio.marshall.thrift.Http1Rule http1Rule;
      private RuleType ruleType;
      public addHttp1Rule_call(com.xjeffrose.xio.marshall.thrift.Http1Rule http1Rule, RuleType ruleType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.http1Rule = http1Rule;
        this.ruleType = ruleType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addHttp1Rule", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addHttp1Rule_args args = new addHttp1Rule_args();
        args.setHttp1Rule(http1Rule);
        args.setRuleType(ruleType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addHttp1Rule();
      }
    }

    public void removeHttp1Rule(com.xjeffrose.xio.marshall.thrift.Http1Rule http1Rule, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeHttp1Rule_call method_call = new removeHttp1Rule_call(http1Rule, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeHttp1Rule_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.xjeffrose.xio.marshall.thrift.Http1Rule http1Rule;
      public removeHttp1Rule_call(com.xjeffrose.xio.marshall.thrift.Http1Rule http1Rule, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.http1Rule = http1Rule;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeHttp1Rule", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeHttp1Rule_args args = new removeHttp1Rule_args();
        args.setHttp1Rule(http1Rule);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeHttp1Rule();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addIpRule", new addIpRule());
      processMap.put("removeIpRule", new removeIpRule());
      processMap.put("addHttp1Rule", new addHttp1Rule());
      processMap.put("removeHttp1Rule", new removeHttp1Rule());
      return processMap;
    }

    public static class addIpRule<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addIpRule_args> {
      public addIpRule() {
        super("addIpRule");
      }

      public addIpRule_args getEmptyArgsInstance() {
        return new addIpRule_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addIpRule_result getResult(I iface, addIpRule_args args) throws org.apache.thrift.TException {
        addIpRule_result result = new addIpRule_result();
        result.success = iface.addIpRule(args.ipRule, args.ruleType);
        return result;
      }
    }

    public static class removeIpRule<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeIpRule_args> {
      public removeIpRule() {
        super("removeIpRule");
      }

      public removeIpRule_args getEmptyArgsInstance() {
        return new removeIpRule_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeIpRule_result getResult(I iface, removeIpRule_args args) throws org.apache.thrift.TException {
        removeIpRule_result result = new removeIpRule_result();
        result.success = iface.removeIpRule(args.ipRule);
        return result;
      }
    }

    public static class addHttp1Rule<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addHttp1Rule_args> {
      public addHttp1Rule() {
        super("addHttp1Rule");
      }

      public addHttp1Rule_args getEmptyArgsInstance() {
        return new addHttp1Rule_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addHttp1Rule_result getResult(I iface, addHttp1Rule_args args) throws org.apache.thrift.TException {
        addHttp1Rule_result result = new addHttp1Rule_result();
        result.success = iface.addHttp1Rule(args.http1Rule, args.ruleType);
        return result;
      }
    }

    public static class removeHttp1Rule<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeHttp1Rule_args> {
      public removeHttp1Rule() {
        super("removeHttp1Rule");
      }

      public removeHttp1Rule_args getEmptyArgsInstance() {
        return new removeHttp1Rule_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeHttp1Rule_result getResult(I iface, removeHttp1Rule_args args) throws org.apache.thrift.TException {
        removeHttp1Rule_result result = new removeHttp1Rule_result();
        result.success = iface.removeHttp1Rule(args.http1Rule);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addIpRule", new addIpRule());
      processMap.put("removeIpRule", new removeIpRule());
      processMap.put("addHttp1Rule", new addHttp1Rule());
      processMap.put("removeHttp1Rule", new removeHttp1Rule());
      return processMap;
    }

    public static class addIpRule<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addIpRule_args, Result> {
      public addIpRule() {
        super("addIpRule");
      }

      public addIpRule_args getEmptyArgsInstance() {
        return new addIpRule_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            addIpRule_result result = new addIpRule_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addIpRule_result result = new addIpRule_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addIpRule_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.addIpRule(args.ipRule, args.ruleType,resultHandler);
      }
    }

    public static class removeIpRule<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeIpRule_args, Result> {
      public removeIpRule() {
        super("removeIpRule");
      }

      public removeIpRule_args getEmptyArgsInstance() {
        return new removeIpRule_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            removeIpRule_result result = new removeIpRule_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeIpRule_result result = new removeIpRule_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeIpRule_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.removeIpRule(args.ipRule,resultHandler);
      }
    }

    public static class addHttp1Rule<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addHttp1Rule_args, Result> {
      public addHttp1Rule() {
        super("addHttp1Rule");
      }

      public addHttp1Rule_args getEmptyArgsInstance() {
        return new addHttp1Rule_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            addHttp1Rule_result result = new addHttp1Rule_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addHttp1Rule_result result = new addHttp1Rule_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addHttp1Rule_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.addHttp1Rule(args.http1Rule, args.ruleType,resultHandler);
      }
    }

    public static class removeHttp1Rule<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeHttp1Rule_args, Result> {
      public removeHttp1Rule() {
        super("removeHttp1Rule");
      }

      public removeHttp1Rule_args getEmptyArgsInstance() {
        return new removeHttp1Rule_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            removeHttp1Rule_result result = new removeHttp1Rule_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeHttp1Rule_result result = new removeHttp1Rule_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeHttp1Rule_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.removeHttp1Rule(args.http1Rule,resultHandler);
      }
    }

  }

  public static class addIpRule_args implements org.apache.thrift.TBase<addIpRule_args, addIpRule_args._Fields>, java.io.Serializable, Cloneable, Comparable<addIpRule_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addIpRule_args");

    private static final org.apache.thrift.protocol.TField IP_RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("ipRule", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RULE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ruleType", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addIpRule_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addIpRule_argsTupleSchemeFactory());
    }

    public IpRule ipRule; // required
    /**
     * 
     * @see RuleType
     */
    public RuleType ruleType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IP_RULE((short)1, "ipRule"),
      /**
       * 
       * @see RuleType
       */
      RULE_TYPE((short)2, "ruleType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IP_RULE
            return IP_RULE;
          case 2: // RULE_TYPE
            return RULE_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IP_RULE, new org.apache.thrift.meta_data.FieldMetaData("ipRule", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IpRule.class)));
      tmpMap.put(_Fields.RULE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("ruleType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RuleType.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addIpRule_args.class, metaDataMap);
    }

    public addIpRule_args() {
    }

    public addIpRule_args(
      IpRule ipRule,
      RuleType ruleType)
    {
      this();
      this.ipRule = ipRule;
      this.ruleType = ruleType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addIpRule_args(addIpRule_args other) {
      if (other.isSetIpRule()) {
        this.ipRule = new IpRule(other.ipRule);
      }
      if (other.isSetRuleType()) {
        this.ruleType = other.ruleType;
      }
    }

    public addIpRule_args deepCopy() {
      return new addIpRule_args(this);
    }

    @Override
    public void clear() {
      this.ipRule = null;
      this.ruleType = null;
    }

    public IpRule getIpRule() {
      return this.ipRule;
    }

    public addIpRule_args setIpRule(IpRule ipRule) {
      this.ipRule = ipRule;
      return this;
    }

    public void unsetIpRule() {
      this.ipRule = null;
    }

    /** Returns true if field ipRule is set (has been assigned a value) and false otherwise */
    public boolean isSetIpRule() {
      return this.ipRule != null;
    }

    public void setIpRuleIsSet(boolean value) {
      if (!value) {
        this.ipRule = null;
      }
    }

    /**
     * 
     * @see RuleType
     */
    public RuleType getRuleType() {
      return this.ruleType;
    }

    /**
     * 
     * @see RuleType
     */
    public addIpRule_args setRuleType(RuleType ruleType) {
      this.ruleType = ruleType;
      return this;
    }

    public void unsetRuleType() {
      this.ruleType = null;
    }

    /** Returns true if field ruleType is set (has been assigned a value) and false otherwise */
    public boolean isSetRuleType() {
      return this.ruleType != null;
    }

    public void setRuleTypeIsSet(boolean value) {
      if (!value) {
        this.ruleType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IP_RULE:
        if (value == null) {
          unsetIpRule();
        } else {
          setIpRule((IpRule)value);
        }
        break;

      case RULE_TYPE:
        if (value == null) {
          unsetRuleType();
        } else {
          setRuleType((RuleType)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IP_RULE:
        return getIpRule();

      case RULE_TYPE:
        return getRuleType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IP_RULE:
        return isSetIpRule();
      case RULE_TYPE:
        return isSetRuleType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addIpRule_args)
        return this.equals((addIpRule_args)that);
      return false;
    }

    public boolean equals(addIpRule_args that) {
      if (that == null)
        return false;

      boolean this_present_ipRule = true && this.isSetIpRule();
      boolean that_present_ipRule = true && that.isSetIpRule();
      if (this_present_ipRule || that_present_ipRule) {
        if (!(this_present_ipRule && that_present_ipRule))
          return false;
        if (!this.ipRule.equals(that.ipRule))
          return false;
      }

      boolean this_present_ruleType = true && this.isSetRuleType();
      boolean that_present_ruleType = true && that.isSetRuleType();
      if (this_present_ruleType || that_present_ruleType) {
        if (!(this_present_ruleType && that_present_ruleType))
          return false;
        if (!this.ruleType.equals(that.ruleType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ipRule = true && (isSetIpRule());
      list.add(present_ipRule);
      if (present_ipRule)
        list.add(ipRule);

      boolean present_ruleType = true && (isSetRuleType());
      list.add(present_ruleType);
      if (present_ruleType)
        list.add(ruleType.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(addIpRule_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIpRule()).compareTo(other.isSetIpRule());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIpRule()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipRule, other.ipRule);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRuleType()).compareTo(other.isSetRuleType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRuleType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ruleType, other.ruleType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addIpRule_args(");
      boolean first = true;

      sb.append("ipRule:");
      if (this.ipRule == null) {
        sb.append("null");
      } else {
        sb.append(this.ipRule);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ruleType:");
      if (this.ruleType == null) {
        sb.append("null");
      } else {
        sb.append(this.ruleType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (ipRule != null) {
        ipRule.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addIpRule_argsStandardSchemeFactory implements SchemeFactory {
      public addIpRule_argsStandardScheme getScheme() {
        return new addIpRule_argsStandardScheme();
      }
    }

    private static class addIpRule_argsStandardScheme extends StandardScheme<addIpRule_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addIpRule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IP_RULE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ipRule = new IpRule();
                struct.ipRule.read(iprot);
                struct.setIpRuleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RULE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.ruleType = com.xjeffrose.xio.config.thrift.RuleType.findByValue(iprot.readI32());
                struct.setRuleTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addIpRule_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ipRule != null) {
          oprot.writeFieldBegin(IP_RULE_FIELD_DESC);
          struct.ipRule.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ruleType != null) {
          oprot.writeFieldBegin(RULE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.ruleType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addIpRule_argsTupleSchemeFactory implements SchemeFactory {
      public addIpRule_argsTupleScheme getScheme() {
        return new addIpRule_argsTupleScheme();
      }
    }

    private static class addIpRule_argsTupleScheme extends TupleScheme<addIpRule_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addIpRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIpRule()) {
          optionals.set(0);
        }
        if (struct.isSetRuleType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIpRule()) {
          struct.ipRule.write(oprot);
        }
        if (struct.isSetRuleType()) {
          oprot.writeI32(struct.ruleType.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addIpRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ipRule = new IpRule();
          struct.ipRule.read(iprot);
          struct.setIpRuleIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ruleType = com.xjeffrose.xio.config.thrift.RuleType.findByValue(iprot.readI32());
          struct.setRuleTypeIsSet(true);
        }
      }
    }

  }

  public static class addIpRule_result implements org.apache.thrift.TBase<addIpRule_result, addIpRule_result._Fields>, java.io.Serializable, Cloneable, Comparable<addIpRule_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addIpRule_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addIpRule_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addIpRule_resultTupleSchemeFactory());
    }

    public Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addIpRule_result.class, metaDataMap);
    }

    public addIpRule_result() {
    }

    public addIpRule_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addIpRule_result(addIpRule_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public addIpRule_result deepCopy() {
      return new addIpRule_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public addIpRule_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addIpRule_result)
        return this.equals((addIpRule_result)that);
      return false;
    }

    public boolean equals(addIpRule_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addIpRule_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addIpRule_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addIpRule_resultStandardSchemeFactory implements SchemeFactory {
      public addIpRule_resultStandardScheme getScheme() {
        return new addIpRule_resultStandardScheme();
      }
    }

    private static class addIpRule_resultStandardScheme extends StandardScheme<addIpRule_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addIpRule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addIpRule_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addIpRule_resultTupleSchemeFactory implements SchemeFactory {
      public addIpRule_resultTupleScheme getScheme() {
        return new addIpRule_resultTupleScheme();
      }
    }

    private static class addIpRule_resultTupleScheme extends TupleScheme<addIpRule_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addIpRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addIpRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class removeIpRule_args implements org.apache.thrift.TBase<removeIpRule_args, removeIpRule_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeIpRule_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeIpRule_args");

    private static final org.apache.thrift.protocol.TField IP_RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("ipRule", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeIpRule_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeIpRule_argsTupleSchemeFactory());
    }

    public IpRule ipRule; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IP_RULE((short)1, "ipRule");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IP_RULE
            return IP_RULE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IP_RULE, new org.apache.thrift.meta_data.FieldMetaData("ipRule", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IpRule.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeIpRule_args.class, metaDataMap);
    }

    public removeIpRule_args() {
    }

    public removeIpRule_args(
      IpRule ipRule)
    {
      this();
      this.ipRule = ipRule;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeIpRule_args(removeIpRule_args other) {
      if (other.isSetIpRule()) {
        this.ipRule = new IpRule(other.ipRule);
      }
    }

    public removeIpRule_args deepCopy() {
      return new removeIpRule_args(this);
    }

    @Override
    public void clear() {
      this.ipRule = null;
    }

    public IpRule getIpRule() {
      return this.ipRule;
    }

    public removeIpRule_args setIpRule(IpRule ipRule) {
      this.ipRule = ipRule;
      return this;
    }

    public void unsetIpRule() {
      this.ipRule = null;
    }

    /** Returns true if field ipRule is set (has been assigned a value) and false otherwise */
    public boolean isSetIpRule() {
      return this.ipRule != null;
    }

    public void setIpRuleIsSet(boolean value) {
      if (!value) {
        this.ipRule = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IP_RULE:
        if (value == null) {
          unsetIpRule();
        } else {
          setIpRule((IpRule)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IP_RULE:
        return getIpRule();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IP_RULE:
        return isSetIpRule();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeIpRule_args)
        return this.equals((removeIpRule_args)that);
      return false;
    }

    public boolean equals(removeIpRule_args that) {
      if (that == null)
        return false;

      boolean this_present_ipRule = true && this.isSetIpRule();
      boolean that_present_ipRule = true && that.isSetIpRule();
      if (this_present_ipRule || that_present_ipRule) {
        if (!(this_present_ipRule && that_present_ipRule))
          return false;
        if (!this.ipRule.equals(that.ipRule))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ipRule = true && (isSetIpRule());
      list.add(present_ipRule);
      if (present_ipRule)
        list.add(ipRule);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeIpRule_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIpRule()).compareTo(other.isSetIpRule());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIpRule()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipRule, other.ipRule);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeIpRule_args(");
      boolean first = true;

      sb.append("ipRule:");
      if (this.ipRule == null) {
        sb.append("null");
      } else {
        sb.append(this.ipRule);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (ipRule != null) {
        ipRule.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeIpRule_argsStandardSchemeFactory implements SchemeFactory {
      public removeIpRule_argsStandardScheme getScheme() {
        return new removeIpRule_argsStandardScheme();
      }
    }

    private static class removeIpRule_argsStandardScheme extends StandardScheme<removeIpRule_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeIpRule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IP_RULE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ipRule = new IpRule();
                struct.ipRule.read(iprot);
                struct.setIpRuleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeIpRule_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ipRule != null) {
          oprot.writeFieldBegin(IP_RULE_FIELD_DESC);
          struct.ipRule.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeIpRule_argsTupleSchemeFactory implements SchemeFactory {
      public removeIpRule_argsTupleScheme getScheme() {
        return new removeIpRule_argsTupleScheme();
      }
    }

    private static class removeIpRule_argsTupleScheme extends TupleScheme<removeIpRule_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeIpRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIpRule()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIpRule()) {
          struct.ipRule.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeIpRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ipRule = new IpRule();
          struct.ipRule.read(iprot);
          struct.setIpRuleIsSet(true);
        }
      }
    }

  }

  public static class removeIpRule_result implements org.apache.thrift.TBase<removeIpRule_result, removeIpRule_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeIpRule_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeIpRule_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeIpRule_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeIpRule_resultTupleSchemeFactory());
    }

    public Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeIpRule_result.class, metaDataMap);
    }

    public removeIpRule_result() {
    }

    public removeIpRule_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeIpRule_result(removeIpRule_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public removeIpRule_result deepCopy() {
      return new removeIpRule_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public removeIpRule_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeIpRule_result)
        return this.equals((removeIpRule_result)that);
      return false;
    }

    public boolean equals(removeIpRule_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeIpRule_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeIpRule_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeIpRule_resultStandardSchemeFactory implements SchemeFactory {
      public removeIpRule_resultStandardScheme getScheme() {
        return new removeIpRule_resultStandardScheme();
      }
    }

    private static class removeIpRule_resultStandardScheme extends StandardScheme<removeIpRule_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeIpRule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeIpRule_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeIpRule_resultTupleSchemeFactory implements SchemeFactory {
      public removeIpRule_resultTupleScheme getScheme() {
        return new removeIpRule_resultTupleScheme();
      }
    }

    private static class removeIpRule_resultTupleScheme extends TupleScheme<removeIpRule_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeIpRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeIpRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addHttp1Rule_args implements org.apache.thrift.TBase<addHttp1Rule_args, addHttp1Rule_args._Fields>, java.io.Serializable, Cloneable, Comparable<addHttp1Rule_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addHttp1Rule_args");

    private static final org.apache.thrift.protocol.TField HTTP1_RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("http1Rule", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RULE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ruleType", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addHttp1Rule_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addHttp1Rule_argsTupleSchemeFactory());
    }

    public com.xjeffrose.xio.marshall.thrift.Http1Rule http1Rule; // required
    /**
     * 
     * @see RuleType
     */
    public RuleType ruleType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HTTP1_RULE((short)1, "http1Rule"),
      /**
       * 
       * @see RuleType
       */
      RULE_TYPE((short)2, "ruleType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HTTP1_RULE
            return HTTP1_RULE;
          case 2: // RULE_TYPE
            return RULE_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HTTP1_RULE, new org.apache.thrift.meta_data.FieldMetaData("http1Rule", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xjeffrose.xio.marshall.thrift.Http1Rule.class)));
      tmpMap.put(_Fields.RULE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("ruleType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RuleType.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addHttp1Rule_args.class, metaDataMap);
    }

    public addHttp1Rule_args() {
    }

    public addHttp1Rule_args(
      com.xjeffrose.xio.marshall.thrift.Http1Rule http1Rule,
      RuleType ruleType)
    {
      this();
      this.http1Rule = http1Rule;
      this.ruleType = ruleType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addHttp1Rule_args(addHttp1Rule_args other) {
      if (other.isSetHttp1Rule()) {
        this.http1Rule = new com.xjeffrose.xio.marshall.thrift.Http1Rule(other.http1Rule);
      }
      if (other.isSetRuleType()) {
        this.ruleType = other.ruleType;
      }
    }

    public addHttp1Rule_args deepCopy() {
      return new addHttp1Rule_args(this);
    }

    @Override
    public void clear() {
      this.http1Rule = null;
      this.ruleType = null;
    }

    public com.xjeffrose.xio.marshall.thrift.Http1Rule getHttp1Rule() {
      return this.http1Rule;
    }

    public addHttp1Rule_args setHttp1Rule(com.xjeffrose.xio.marshall.thrift.Http1Rule http1Rule) {
      this.http1Rule = http1Rule;
      return this;
    }

    public void unsetHttp1Rule() {
      this.http1Rule = null;
    }

    /** Returns true if field http1Rule is set (has been assigned a value) and false otherwise */
    public boolean isSetHttp1Rule() {
      return this.http1Rule != null;
    }

    public void setHttp1RuleIsSet(boolean value) {
      if (!value) {
        this.http1Rule = null;
      }
    }

    /**
     * 
     * @see RuleType
     */
    public RuleType getRuleType() {
      return this.ruleType;
    }

    /**
     * 
     * @see RuleType
     */
    public addHttp1Rule_args setRuleType(RuleType ruleType) {
      this.ruleType = ruleType;
      return this;
    }

    public void unsetRuleType() {
      this.ruleType = null;
    }

    /** Returns true if field ruleType is set (has been assigned a value) and false otherwise */
    public boolean isSetRuleType() {
      return this.ruleType != null;
    }

    public void setRuleTypeIsSet(boolean value) {
      if (!value) {
        this.ruleType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HTTP1_RULE:
        if (value == null) {
          unsetHttp1Rule();
        } else {
          setHttp1Rule((com.xjeffrose.xio.marshall.thrift.Http1Rule)value);
        }
        break;

      case RULE_TYPE:
        if (value == null) {
          unsetRuleType();
        } else {
          setRuleType((RuleType)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HTTP1_RULE:
        return getHttp1Rule();

      case RULE_TYPE:
        return getRuleType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HTTP1_RULE:
        return isSetHttp1Rule();
      case RULE_TYPE:
        return isSetRuleType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addHttp1Rule_args)
        return this.equals((addHttp1Rule_args)that);
      return false;
    }

    public boolean equals(addHttp1Rule_args that) {
      if (that == null)
        return false;

      boolean this_present_http1Rule = true && this.isSetHttp1Rule();
      boolean that_present_http1Rule = true && that.isSetHttp1Rule();
      if (this_present_http1Rule || that_present_http1Rule) {
        if (!(this_present_http1Rule && that_present_http1Rule))
          return false;
        if (!this.http1Rule.equals(that.http1Rule))
          return false;
      }

      boolean this_present_ruleType = true && this.isSetRuleType();
      boolean that_present_ruleType = true && that.isSetRuleType();
      if (this_present_ruleType || that_present_ruleType) {
        if (!(this_present_ruleType && that_present_ruleType))
          return false;
        if (!this.ruleType.equals(that.ruleType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_http1Rule = true && (isSetHttp1Rule());
      list.add(present_http1Rule);
      if (present_http1Rule)
        list.add(http1Rule);

      boolean present_ruleType = true && (isSetRuleType());
      list.add(present_ruleType);
      if (present_ruleType)
        list.add(ruleType.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(addHttp1Rule_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHttp1Rule()).compareTo(other.isSetHttp1Rule());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHttp1Rule()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.http1Rule, other.http1Rule);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRuleType()).compareTo(other.isSetRuleType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRuleType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ruleType, other.ruleType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addHttp1Rule_args(");
      boolean first = true;

      sb.append("http1Rule:");
      if (this.http1Rule == null) {
        sb.append("null");
      } else {
        sb.append(this.http1Rule);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ruleType:");
      if (this.ruleType == null) {
        sb.append("null");
      } else {
        sb.append(this.ruleType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (http1Rule != null) {
        http1Rule.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addHttp1Rule_argsStandardSchemeFactory implements SchemeFactory {
      public addHttp1Rule_argsStandardScheme getScheme() {
        return new addHttp1Rule_argsStandardScheme();
      }
    }

    private static class addHttp1Rule_argsStandardScheme extends StandardScheme<addHttp1Rule_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addHttp1Rule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HTTP1_RULE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.http1Rule = new com.xjeffrose.xio.marshall.thrift.Http1Rule();
                struct.http1Rule.read(iprot);
                struct.setHttp1RuleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RULE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.ruleType = com.xjeffrose.xio.config.thrift.RuleType.findByValue(iprot.readI32());
                struct.setRuleTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addHttp1Rule_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.http1Rule != null) {
          oprot.writeFieldBegin(HTTP1_RULE_FIELD_DESC);
          struct.http1Rule.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ruleType != null) {
          oprot.writeFieldBegin(RULE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.ruleType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addHttp1Rule_argsTupleSchemeFactory implements SchemeFactory {
      public addHttp1Rule_argsTupleScheme getScheme() {
        return new addHttp1Rule_argsTupleScheme();
      }
    }

    private static class addHttp1Rule_argsTupleScheme extends TupleScheme<addHttp1Rule_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addHttp1Rule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHttp1Rule()) {
          optionals.set(0);
        }
        if (struct.isSetRuleType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetHttp1Rule()) {
          struct.http1Rule.write(oprot);
        }
        if (struct.isSetRuleType()) {
          oprot.writeI32(struct.ruleType.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addHttp1Rule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.http1Rule = new com.xjeffrose.xio.marshall.thrift.Http1Rule();
          struct.http1Rule.read(iprot);
          struct.setHttp1RuleIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ruleType = com.xjeffrose.xio.config.thrift.RuleType.findByValue(iprot.readI32());
          struct.setRuleTypeIsSet(true);
        }
      }
    }

  }

  public static class addHttp1Rule_result implements org.apache.thrift.TBase<addHttp1Rule_result, addHttp1Rule_result._Fields>, java.io.Serializable, Cloneable, Comparable<addHttp1Rule_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addHttp1Rule_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addHttp1Rule_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addHttp1Rule_resultTupleSchemeFactory());
    }

    public Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addHttp1Rule_result.class, metaDataMap);
    }

    public addHttp1Rule_result() {
    }

    public addHttp1Rule_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addHttp1Rule_result(addHttp1Rule_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public addHttp1Rule_result deepCopy() {
      return new addHttp1Rule_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public addHttp1Rule_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addHttp1Rule_result)
        return this.equals((addHttp1Rule_result)that);
      return false;
    }

    public boolean equals(addHttp1Rule_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addHttp1Rule_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addHttp1Rule_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addHttp1Rule_resultStandardSchemeFactory implements SchemeFactory {
      public addHttp1Rule_resultStandardScheme getScheme() {
        return new addHttp1Rule_resultStandardScheme();
      }
    }

    private static class addHttp1Rule_resultStandardScheme extends StandardScheme<addHttp1Rule_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addHttp1Rule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addHttp1Rule_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addHttp1Rule_resultTupleSchemeFactory implements SchemeFactory {
      public addHttp1Rule_resultTupleScheme getScheme() {
        return new addHttp1Rule_resultTupleScheme();
      }
    }

    private static class addHttp1Rule_resultTupleScheme extends TupleScheme<addHttp1Rule_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addHttp1Rule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addHttp1Rule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class removeHttp1Rule_args implements org.apache.thrift.TBase<removeHttp1Rule_args, removeHttp1Rule_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeHttp1Rule_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeHttp1Rule_args");

    private static final org.apache.thrift.protocol.TField HTTP1_RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("http1Rule", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeHttp1Rule_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeHttp1Rule_argsTupleSchemeFactory());
    }

    public com.xjeffrose.xio.marshall.thrift.Http1Rule http1Rule; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HTTP1_RULE((short)1, "http1Rule");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HTTP1_RULE
            return HTTP1_RULE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HTTP1_RULE, new org.apache.thrift.meta_data.FieldMetaData("http1Rule", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xjeffrose.xio.marshall.thrift.Http1Rule.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeHttp1Rule_args.class, metaDataMap);
    }

    public removeHttp1Rule_args() {
    }

    public removeHttp1Rule_args(
      com.xjeffrose.xio.marshall.thrift.Http1Rule http1Rule)
    {
      this();
      this.http1Rule = http1Rule;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeHttp1Rule_args(removeHttp1Rule_args other) {
      if (other.isSetHttp1Rule()) {
        this.http1Rule = new com.xjeffrose.xio.marshall.thrift.Http1Rule(other.http1Rule);
      }
    }

    public removeHttp1Rule_args deepCopy() {
      return new removeHttp1Rule_args(this);
    }

    @Override
    public void clear() {
      this.http1Rule = null;
    }

    public com.xjeffrose.xio.marshall.thrift.Http1Rule getHttp1Rule() {
      return this.http1Rule;
    }

    public removeHttp1Rule_args setHttp1Rule(com.xjeffrose.xio.marshall.thrift.Http1Rule http1Rule) {
      this.http1Rule = http1Rule;
      return this;
    }

    public void unsetHttp1Rule() {
      this.http1Rule = null;
    }

    /** Returns true if field http1Rule is set (has been assigned a value) and false otherwise */
    public boolean isSetHttp1Rule() {
      return this.http1Rule != null;
    }

    public void setHttp1RuleIsSet(boolean value) {
      if (!value) {
        this.http1Rule = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HTTP1_RULE:
        if (value == null) {
          unsetHttp1Rule();
        } else {
          setHttp1Rule((com.xjeffrose.xio.marshall.thrift.Http1Rule)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HTTP1_RULE:
        return getHttp1Rule();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HTTP1_RULE:
        return isSetHttp1Rule();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeHttp1Rule_args)
        return this.equals((removeHttp1Rule_args)that);
      return false;
    }

    public boolean equals(removeHttp1Rule_args that) {
      if (that == null)
        return false;

      boolean this_present_http1Rule = true && this.isSetHttp1Rule();
      boolean that_present_http1Rule = true && that.isSetHttp1Rule();
      if (this_present_http1Rule || that_present_http1Rule) {
        if (!(this_present_http1Rule && that_present_http1Rule))
          return false;
        if (!this.http1Rule.equals(that.http1Rule))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_http1Rule = true && (isSetHttp1Rule());
      list.add(present_http1Rule);
      if (present_http1Rule)
        list.add(http1Rule);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeHttp1Rule_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHttp1Rule()).compareTo(other.isSetHttp1Rule());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHttp1Rule()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.http1Rule, other.http1Rule);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeHttp1Rule_args(");
      boolean first = true;

      sb.append("http1Rule:");
      if (this.http1Rule == null) {
        sb.append("null");
      } else {
        sb.append(this.http1Rule);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (http1Rule != null) {
        http1Rule.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeHttp1Rule_argsStandardSchemeFactory implements SchemeFactory {
      public removeHttp1Rule_argsStandardScheme getScheme() {
        return new removeHttp1Rule_argsStandardScheme();
      }
    }

    private static class removeHttp1Rule_argsStandardScheme extends StandardScheme<removeHttp1Rule_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeHttp1Rule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HTTP1_RULE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.http1Rule = new com.xjeffrose.xio.marshall.thrift.Http1Rule();
                struct.http1Rule.read(iprot);
                struct.setHttp1RuleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeHttp1Rule_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.http1Rule != null) {
          oprot.writeFieldBegin(HTTP1_RULE_FIELD_DESC);
          struct.http1Rule.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeHttp1Rule_argsTupleSchemeFactory implements SchemeFactory {
      public removeHttp1Rule_argsTupleScheme getScheme() {
        return new removeHttp1Rule_argsTupleScheme();
      }
    }

    private static class removeHttp1Rule_argsTupleScheme extends TupleScheme<removeHttp1Rule_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeHttp1Rule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHttp1Rule()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHttp1Rule()) {
          struct.http1Rule.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeHttp1Rule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.http1Rule = new com.xjeffrose.xio.marshall.thrift.Http1Rule();
          struct.http1Rule.read(iprot);
          struct.setHttp1RuleIsSet(true);
        }
      }
    }

  }

  public static class removeHttp1Rule_result implements org.apache.thrift.TBase<removeHttp1Rule_result, removeHttp1Rule_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeHttp1Rule_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeHttp1Rule_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeHttp1Rule_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeHttp1Rule_resultTupleSchemeFactory());
    }

    public Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeHttp1Rule_result.class, metaDataMap);
    }

    public removeHttp1Rule_result() {
    }

    public removeHttp1Rule_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeHttp1Rule_result(removeHttp1Rule_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public removeHttp1Rule_result deepCopy() {
      return new removeHttp1Rule_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public removeHttp1Rule_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeHttp1Rule_result)
        return this.equals((removeHttp1Rule_result)that);
      return false;
    }

    public boolean equals(removeHttp1Rule_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeHttp1Rule_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeHttp1Rule_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeHttp1Rule_resultStandardSchemeFactory implements SchemeFactory {
      public removeHttp1Rule_resultStandardScheme getScheme() {
        return new removeHttp1Rule_resultStandardScheme();
      }
    }

    private static class removeHttp1Rule_resultStandardScheme extends StandardScheme<removeHttp1Rule_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeHttp1Rule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeHttp1Rule_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeHttp1Rule_resultTupleSchemeFactory implements SchemeFactory {
      public removeHttp1Rule_resultTupleScheme getScheme() {
        return new removeHttp1Rule_resultTupleScheme();
      }
    }

    private static class removeHttp1Rule_resultTupleScheme extends TupleScheme<removeHttp1Rule_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeHttp1Rule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeHttp1Rule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
