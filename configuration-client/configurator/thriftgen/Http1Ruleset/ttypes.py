#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Http1Version:
  HTTP_1_0 = 0
  HTTP_1_1 = 1

  _VALUES_TO_NAMES = {
    0: "HTTP_1_0",
    1: "HTTP_1_1",
  }

  _NAMES_TO_VALUES = {
    "HTTP_1_0": 0,
    "HTTP_1_1": 1,
  }

class Http1Method:
  CONNECT = 0
  DELETE = 1
  GET = 2
  HEAD = 3
  OPTIONS = 4
  PATCH = 5
  POST = 6
  PUT = 7
  TRACE = 8

  _VALUES_TO_NAMES = {
    0: "CONNECT",
    1: "DELETE",
    2: "GET",
    3: "HEAD",
    4: "OPTIONS",
    5: "PATCH",
    6: "POST",
    7: "PUT",
    8: "TRACE",
  }

  _NAMES_TO_VALUES = {
    "CONNECT": 0,
    "DELETE": 1,
    "GET": 2,
    "HEAD": 3,
    "OPTIONS": 4,
    "PATCH": 5,
    "POST": 6,
    "PUT": 7,
    "TRACE": 8,
  }


class Http1HeaderTuple:
  """
  Attributes:
   - key
   - value
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRING, 'value', None, None, ), # 2
  )

  def __init__(self, key=None, value=None,):
    self.key = key
    self.value = value

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.value = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Http1HeaderTuple')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.STRING, 2)
      oprot.writeString(self.value)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.key is None:
      raise TProtocol.TProtocolException(message='Required field key is unset!')
    if self.value is None:
      raise TProtocol.TProtocolException(message='Required field value is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.value)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Http1Rule:
  """
  Attributes:
   - method
   - uri
   - version
   - headers
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'method', None, None, ), # 1
    (2, TType.STRING, 'uri', None, None, ), # 2
    (3, TType.I32, 'version', None, None, ), # 3
    (4, TType.LIST, 'headers', (TType.STRUCT,(Http1HeaderTuple, Http1HeaderTuple.thrift_spec)), None, ), # 4
  )

  def __init__(self, method=None, uri=None, version=None, headers=None,):
    self.method = method
    self.uri = uri
    self.version = version
    self.headers = headers

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.method = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.uri = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.version = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.headers = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = Http1HeaderTuple()
            _elem5.read(iprot)
            self.headers.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Http1Rule')
    if self.method is not None:
      oprot.writeFieldBegin('method', TType.I32, 1)
      oprot.writeI32(self.method)
      oprot.writeFieldEnd()
    if self.uri is not None:
      oprot.writeFieldBegin('uri', TType.STRING, 2)
      oprot.writeString(self.uri)
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.I32, 3)
      oprot.writeI32(self.version)
      oprot.writeFieldEnd()
    if self.headers is not None:
      oprot.writeFieldBegin('headers', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.headers))
      for iter6 in self.headers:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.method)
    value = (value * 31) ^ hash(self.uri)
    value = (value * 31) ^ hash(self.version)
    value = (value * 31) ^ hash(self.headers)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Http1Ruleset:
  """
  Attributes:
   - blacklistRules
   - whitelistRules
  """

  thrift_spec = (
    None, # 0
    (1, TType.SET, 'blacklistRules', (TType.STRUCT,(Http1Rule, Http1Rule.thrift_spec)), None, ), # 1
    (2, TType.SET, 'whitelistRules', (TType.STRUCT,(Http1Rule, Http1Rule.thrift_spec)), None, ), # 2
  )

  def __init__(self, blacklistRules=None, whitelistRules=None,):
    self.blacklistRules = blacklistRules
    self.whitelistRules = whitelistRules

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.SET:
          self.blacklistRules = set()
          (_etype10, _size7) = iprot.readSetBegin()
          for _i11 in xrange(_size7):
            _elem12 = Http1Rule()
            _elem12.read(iprot)
            self.blacklistRules.add(_elem12)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.SET:
          self.whitelistRules = set()
          (_etype16, _size13) = iprot.readSetBegin()
          for _i17 in xrange(_size13):
            _elem18 = Http1Rule()
            _elem18.read(iprot)
            self.whitelistRules.add(_elem18)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Http1Ruleset')
    if self.blacklistRules is not None:
      oprot.writeFieldBegin('blacklistRules', TType.SET, 1)
      oprot.writeSetBegin(TType.STRUCT, len(self.blacklistRules))
      for iter19 in self.blacklistRules:
        iter19.write(oprot)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.whitelistRules is not None:
      oprot.writeFieldBegin('whitelistRules', TType.SET, 2)
      oprot.writeSetBegin(TType.STRUCT, len(self.whitelistRules))
      for iter20 in self.whitelistRules:
        iter20.write(oprot)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.blacklistRules is None:
      raise TProtocol.TProtocolException(message='Required field blacklistRules is unset!')
    if self.whitelistRules is None:
      raise TProtocol.TProtocolException(message='Required field whitelistRules is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.blacklistRules)
    value = (value * 31) ^ hash(self.whitelistRules)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
