#!/usr/bin/env python

import argparse
import difflib
import hashlib
import os
import shutil

def generate_makefile(src, dest):
  shutil.copy(src, dest)

def has_java_files(files):
  return any(map(lambda x: x.endswith('.java'), files))

def makefile_path(path):
  return os.path.join(path, 'Makefile')

def has_makefile(path):
  return os.path.exists(makefile_path(path))

def get_makefile(path):
  return open(makefile_path(path)).read()

def parse_args():
  parser = argparse.ArgumentParser()
  parser.add_argument('src_dir', type=str)
  parser.add_argument('--template', dest='template_path', type=str, default='templates/Makefile')
  parser.add_argument('-n', '--dry-run', action='store_const', const=True, default=False)

  return parser.parse_args()

def display_diff(source, dest, source_path, dest_path):
  source_lines=source.splitlines(True)
  dest_lines=dest.splitlines(True)
  for line in difflib.unified_diff(source_lines, dest_lines, fromfile=source_path, tofile=dest_path):
    print line,

def prompt(text, expected='YyNn'):
  result = None
  while True:
    result = raw_input(text)
    if result in expected:
      break
  return result.lower()

def main():
  args = parse_args()

  template = open(args.template_path).read()
  template_hash = hashlib.sha256(template).hexdigest()
  for path, dirs, files in os.walk(args.src_dir):
    dest_path = makefile_path(path)
    if has_java_files(files):
      if has_makefile(path):
        if args.dry_run:
          print '{path} has a Makefile'.format(path=path)
        else:
          dest = get_makefile(path)
          dest_hash = hashlib.sha256(dest).hexdigest()
          if template_hash != dest_hash:
            display_diff(dest, template, dest_path, args.template_path)
            if prompt('Replace \'{path}\'? '.format(path=dest_path)) == 'y':
              generate_makefile(args.template_path, dest_path)
          else:
            print '{path} is unchanged'.format(path=dest_path)
      else:
        if args.dry_run:
          print '{path} needs a Makefile'.format(path=path)
        else:
          generate_makefile(args.template_path, dest_path)

if __name__ == '__main__':
  main()
