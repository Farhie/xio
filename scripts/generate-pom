#!/usr/bin/env python

import argparse
import os
from xml.dom import minidom

desired_output = '''\
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.sonatype.oss</groupId>
        <artifactId>oss-parent</artifactId>
        <version>9</version>
    </parent>

    <groupId>com.xjeffrose</groupId>
    <artifactId>xio</artifactId>
    <version>0.12.0-SNAPSHOT</version>
    <packaging>jar</packaging>
    <name>xio</name>
    <description>High Performance HTTP Server based on Netty and Xio</description>
    <url>https://github.com/xjdr/xio.git</url>

    <properties>
        <!-- Constants -->
        <java.version>1.8</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!-- Dependencies -->
        <jmh.version>1.4.1</jmh.version>
    </properties>

    <scm>
        <url>https://github.com/xjdr/xio/</url>
        <connection>scm:git:https://github.com/xjdr/xio.git</connection>
        <developerConnection>scm:git:git@github.com:xjdr/xio.git</developerConnection>
        <tag>HEAD</tag>
    </scm>

    <issueManagement>
        <system>GitHub Issues</system>
        <url>https://github.com/xjdr/xio/issues</url>
    </issueManagement>

    <licenses>
        <license>
            <name>Apache 2.0</name>
            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
        </license>
    </licenses>

    <distributionManagement>
        <snapshotRepository>
            <id>ossrh</id>
            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
        </snapshotRepository>
        <repository>
            <id>ossrh</id>
            <url>https://oss.sonatype.org/httpService/local/staging/deploy/maven2/</url>
        </repository>
    </distributionManagement>

    <dependencies>
        <dependency>
            <groupId>com.google.code.findbugs</groupId>
            <artifactId>jsr305</artifactId>
            <version>3.0.1</version>
        </dependency>

        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>19.0</version>
        </dependency>

        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-all</artifactId>
            <version>4.1.0.Final</version>
        </dependency>

        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-tcnative</artifactId>
            <version>1.1.33.Fork17</version>
            <classifier>${os.detected.classifier}</classifier>
        </dependency>

        <dependency>
            <groupId>io.airlift</groupId>
            <artifactId>units</artifactId>
            <version>0.128</version>
        </dependency>

        <dependency>
            <groupId>org.apache.curator</groupId>
            <artifactId>curator-framework</artifactId>
            <version>3.1.0</version>
        </dependency>

        <dependency>
            <groupId>org.apache.curator</groupId>
            <artifactId>curator-recipes</artifactId>
            <version>3.1.0</version>
        </dependency>

        <!-- Junit and okhttp are only required for development and testing -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-all</artifactId>
            <version>1.10.19</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-server</artifactId>
            <version>9.3.1.v20150714</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>com.squareup.okhttp</groupId>
            <artifactId>okhttp</artifactId>
            <version>2.4.0</version>
            <scope>test</scope>
        </dependency>

        <!--Only used to compile the Glog Formatter, not a dependency for xio-->
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>1.2.17</version>
            <scope>provided</scope>
        </dependency>


    </dependencies>
    <build>
        <extensions>
            <extension>
                <groupId>kr.motd.maven</groupId>
                <artifactId>os-maven-plugin</artifactId>
                <version>1.4.0.Final</version>
            </extension>
        </extensions>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.18.1</version>
                <configuration combine.children="append">
                    <systemPropertyVariables>
                        <java.util.logging.SimpleFormatter.format>%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS %4$s %5$s%6$s%n</java.util.logging.SimpleFormatter.format>
                    </systemPropertyVariables>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>2.1</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>findbugs-maven-plugin</artifactId>
                <version>3.0.1</version>
                <configuration>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>2.9</version>
                <configuration>
                    <quiet>true</quiet>
                    <source>1.8</source>
                    <encoding>${project.build.sourceEncoding}</encoding>
                </configuration>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-release-plugin</artifactId>
                <version>2.5</version>
                <configuration>
                    <autoVersionSubmodules>true</autoVersionSubmodules>
                    <goals>deploy</goals>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>cobertura-maven-plugin</artifactId>
                <version>2.7</version>
                <configuration>
                    <format>xml</format>
                    <maxmem>256m</maxmem>
                    <!-- aggregated reports for multi-module projects -->
                    <aggregate>true</aggregate>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.eluder.coveralls</groupId>
                <artifactId>coveralls-maven-plugin</artifactId>
                <version>3.0.1</version>
            </plugin>
        </plugins>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.2</version>
                    <configuration>
                        <source>1.8</source>
                        <target>1.8</target>
                        <compilerArgument>-XDignore.symbol.file</compilerArgument>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>com.mycila</groupId>
                    <artifactId>license-maven-plugin</artifactId>
                    <version>2.11</version>
                    <configuration>
                        <properties>
                            <inceptionYear>${project.inceptionYear}</inceptionYear>
                            <year>2016</year>
                        </properties>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
</project>'''

class Project(object):
  def __init__(self, **kwargs):
    self.dependencies = kwargs.get('dependencies')

class Dependencies(object):
  def __init__(self, *args):
    self.dependencies = args

  def __iter__(self):
    for item in self.dependencies:
      yield item

class Dependency(object):
  def __init__(self, group, artifact, version, scope=None):
    self.group = group
    self.artifact = artifact
    self.version = version
    self.scope = scope

project_object_model = Project(
  dependencies=Dependencies(
    Dependency('com.google.code.findbugs', 'jsr305', '3.0.1'),
    Dependency('com.google.guava', 'guava', '19.0'),
    Dependency('io.netty', 'netty-all', '4.1.0.Final'),
    Dependency('io.netty', 'netty-tcnative', '1.1.33.Fork17'),
    Dependency('io.airlift', 'units', '0.128'),
    Dependency('org.apache.curator', 'curator-framework', '3.1.0'),
    Dependency('org.apache.curator', 'curator-recipes', '3.1.0'),
    Dependency('junit', 'junit', '4.12', 'test'),
    Dependency('org.mockito', 'mockito-all', '1.10.19', 'test'),
    Dependency('org.eclipse.jetty', 'jetty-server', '9.3.1.v20150714', 'test'),
    Dependency('com.squareup.okhttp', 'okhttp', '2.4.0', 'test'),
    Dependency('log4j', 'log4j', '1.2.17', 'provided'),
    Dependency('com.puppycrawl.tools', 'checkstyle', '6.19'),
    Dependency('org.eclipse.jdt.core.compiler', 'ecj', '4.5.1'),
    Dependency('io.netty', 'netty-tcnative-boringssl-static', '1.1.33.Fork17'),
  )
)

class PomGenerator(object):
  def __init__(self, model):
    self.model = model
    self.dom = minidom.getDOMImplementation()
    self.doc = self.dom.createDocument(None, 'project', None)
    self.project = self.doc.documentElement

  def createNodeWithText(self, tag, text):
    node = self.doc.createElement(tag)
    node.appendChild(self.doc.createTextNode(text))
    return node

  def buildParent(self):
    node = self.doc.createElement('parent')
    self.project.appendChild(node)
    node.appendChild(self.createNodeWithText('groupId', 'org.sonatype.oss'))
    node.appendChild(self.createNodeWithText('artifactId', 'oss-parent'))
    node.appendChild(self.createNodeWithText('version', '9'))
    self.project.appendChild(self.doc.createTextNode(''))

  def buildProperties(self):
    node = self.doc.createElement('properties')
    self.project.appendChild(node)
    node.appendChild(self.doc.createComment(' Constants '))
    node.appendChild(self.createNodeWithText('java.version', '1.8'))
    node.appendChild(self.createNodeWithText('project.build.sourceEncoding', 'UTF-8'))
    node.appendChild(self.doc.createTextNode(''))
    node.appendChild(self.doc.createComment(' Dependencies '))
    node.appendChild(self.createNodeWithText('jmh.version', '1.4.1'))
    self.project.appendChild(self.doc.createTextNode(''))

  def buildScm(self):
    node = self.doc.createElement('scm')
    self.project.appendChild(node)
    node.appendChild(self.createNodeWithText('url', 'https://github.com/xjdr/xio/'))
    node.appendChild(self.createNodeWithText('connection', 'scm:git:https://github.com/xjdr/xio.git'))
    node.appendChild(self.createNodeWithText('developerConnection', 'scm:git:git@github.com:xjdr/xio.git'))
    node.appendChild(self.createNodeWithText('tag', 'HEAD'))
    self.project.appendChild(self.doc.createTextNode(''))

  def buildIssueManagement(self):
    node = self.doc.createElement('issueManagement')
    self.project.appendChild(node)
    node.appendChild(self.createNodeWithText('system', 'GitHub Issues'))
    node.appendChild(self.createNodeWithText('url', 'https://github.com/xjdr/xio/issues'))
    self.project.appendChild(self.doc.createTextNode(''))

  def buildLicenses(self):
    node = self.doc.createElement('licenses')
    self.project.appendChild(node)
    subnode = self.doc.createElement('license')
    node.appendChild(subnode)
    subnode.appendChild(self.createNodeWithText('name', 'Apache 2.0'))
    subnode.appendChild(self.createNodeWithText('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt'))
    self.project.appendChild(self.doc.createTextNode(''))

  def buildDistributionManagement(self):
    node = self.doc.createElement('distributionManagement')
    self.project.appendChild(node)
    subnode = self.doc.createElement('snapshotRepository')
    node.appendChild(subnode)
    subnode.appendChild(self.createNodeWithText('id', 'ossrh'))
    subnode.appendChild(self.createNodeWithText('url', 'https://oss.sonatype.org/content/repositories/snapshots'))
    subnode = self.doc.createElement('repository')
    node.appendChild(subnode)
    subnode.appendChild(self.createNodeWithText('id', 'ossrh'))
    subnode.appendChild(self.createNodeWithText('url', 'https://oss.sonatype.org/httpService/local/staging/deploy/maven2/'))
    self.project.appendChild(self.doc.createTextNode(''))


  def buildDependencies(self):
    dependencies = self.doc.createElement('dependencies')
    self.project.appendChild(dependencies)
    for dependency in self.model.dependencies:
      node = self.doc.createElement('dependency')
      dependencies.appendChild(node)
      dependencies.appendChild(self.doc.createTextNode(''))

      node.appendChild(self.createNodeWithText('groupId', dependency.group))
      node.appendChild(self.createNodeWithText('artifactId', dependency.artifact))
      node.appendChild(self.createNodeWithText('version', dependency.version))
      if dependency.scope is not None:
        node.appendChild(self.createNodeWithText('scope', dependency.scope))

  def buildBuild(self):
    buildBoilerplate = '''\
    <build>
        <extensions>
            <extension>
                <groupId>kr.motd.maven</groupId>
                <artifactId>os-maven-plugin</artifactId>
                <version>1.4.0.Final</version>
            </extension>
        </extensions>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.18.1</version>
                <configuration combine.children="append">
                    <systemPropertyVariables>
                        <java.util.logging.SimpleFormatter.format>%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS %4$s %5$s%6$s%n</java.util.logging.SimpleFormatter.format>
                    </systemPropertyVariables>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>2.1</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>findbugs-maven-plugin</artifactId>
                <version>3.0.1</version>
                <configuration>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>2.9</version>
                <configuration>
                    <quiet>true</quiet>
                    <source>1.8</source>
                    <encoding>${project.build.sourceEncoding}</encoding>
                </configuration>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-release-plugin</artifactId>
              <version>2.5</version>
              <configuration>
                <autoVersionSubmodules>true</autoVersionSubmodules>
                <goals>deploy</goals>
              </configuration>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>cobertura-maven-plugin</artifactId>
                <version>2.7</version>
                <configuration>
                    <format>xml</format>
                    <maxmem>256m</maxmem>
                    <!-- aggregated reports for multi-module projects -->
                    <aggregate>true</aggregate>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.eluder.coveralls</groupId>
                <artifactId>coveralls-maven-plugin</artifactId>
                <version>3.0.1</version>
            </plugin>
        </plugins>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.2</version>
                    <configuration>
                        <source>1.8</source>
                        <target>1.8</target>
                        <compilerArgument>-XDignore.symbol.file</compilerArgument>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>com.mycila</groupId>
                    <artifactId>license-maven-plugin</artifactId>
                    <version>2.11</version>
                    <configuration>
                        <properties>
                            <inceptionYear>${project.inceptionYear}</inceptionYear>
                            <year>2016</year>
                        </properties>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>'''

    build = minidom.parseString(buildBoilerplate)
    def removeWhiteSpaceNodes(parent):
      for child in list(parent.childNodes):
        if child.hasChildNodes():
          removeWhiteSpaceNodes(child)

        if child.nodeType == child.TEXT_NODE and child.nodeValue.isspace():
          parent.removeChild(child)

    removeWhiteSpaceNodes(build.documentElement)
    self.project.appendChild(build.documentElement)

  def buildProject(self):
    self.project.setAttribute('xmlns', 'http://maven.apache.org/POM/4.0.0')
    self.project.setAttribute('xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance')
    self.project.setAttribute('xsi:schemaLocation', 'http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd')
    self.project.appendChild(self.createNodeWithText('modelVersion', '4.0.0'))
    self.project.appendChild(self.doc.createTextNode(''))
    self.buildParent()
    self.project.appendChild(self.createNodeWithText('groupId', 'com.xjeffrose'))
    self.project.appendChild(self.createNodeWithText('artifactId', 'xio'))
    self.project.appendChild(self.createNodeWithText('version', '0.12.0-SNAPSHOT'))
    self.project.appendChild(self.createNodeWithText('packaging', 'jar'))
    self.project.appendChild(self.createNodeWithText('name', 'xio'))
    self.project.appendChild(self.createNodeWithText('description', 'High Performance HTTP Server based on Netty and Xio'))
    self.project.appendChild(self.createNodeWithText('url', 'https://github.com/xjdr/xio.git'))
    self.project.appendChild(self.doc.createTextNode(''))
    self.buildProperties()
    self.buildScm()
    self.buildIssueManagement()
    self.buildLicenses()
    self.buildDistributionManagement()
    self.buildDependencies()
    self.buildBuild()

  def build(self):
    self.buildProject()

  def generate(self):
    self.build()
    def space_remover(line):
      if line.isspace():
        return ''
      return line

    xml = self.doc.toprettyxml(indent=' '*4, encoding='UTF-8')
    return '\n'.join(map(space_remover, xml.splitlines()))

def parse_args():
  parser = argparse.ArgumentParser()
  #parser.add_argument('src_dir', type=str)
  parser.add_argument('-n', '--dry-run', action='store_const', const=True, default=False)

  return parser.parse_args()

def main():
  args = parse_args()

  import difflib
  generator = PomGenerator(project_object_model)
  output = generator.generate()

  if args.dry_run:
    for line in difflib.unified_diff(desired_output.splitlines(True), output.splitlines(True), fromfile='desired', tofile='actual'):
      print line,
  else:
    print output,

if __name__ == '__main__':
  main()
